{"ast":null,"code":"var _jsxFileName = \"/Users/zop7768/go/src/MyProjects/massmailgeneratorusinggolang/frontend/src/components/EmailSender.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Container, Typography, Box } from '@mui/material';\nimport { sendEmail } from '../services/emailService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailSender = () => {\n  _s();\n  const [emails, setEmails] = useState('');\n  const [subject, setSubject] = useState('');\n  const [body, setBody] = useState('');\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [validEmails, setValidEmails] = useState([]); // Initialize as an empty array\n  const [invalidEmails, setInvalidEmails] = useState([]); // Initialize as an empty array\n\n  const handleFileUpload = event => {\n    setFile(event.target.files[0]);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const formData = new FormData();\n    formData.append('subject', subject);\n    formData.append('body', body);\n    if (file) {\n      formData.append('file', file);\n    } else {\n      formData.append('emails', emails);\n    }\n    try {\n      const result = await sendEmail(formData);\n      setSuccess(result.message);\n      setValidEmails(result.valid_emails || []); // Ensure it's always an array\n      setInvalidEmails(result.invalid_emails || []); // Ensure it's always an array\n      setError('');\n    } catch (err) {\n      setError(err.error || 'Failed to send emails');\n      setSuccess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Mass Email Sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Subject\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        value: subject,\n        onChange: e => setSubject(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Body\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        multiline: true,\n        rows: 4,\n        value: body,\n        onChange: e => setBody(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Recipient Emails\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        multiline: true // Allow multiple lines\n        ,\n        rows: 4 // Set visible rows\n        ,\n        placeholder: \"Enter emails separated by commas or newlines\",\n        value: emails,\n        onChange: e => setEmails(e.target.value),\n        disabled: !!file // Disable if file is uploaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        gutterBottom: true,\n        children: \"OR upload a CSV file with email addresses:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        onChange: handleFileUpload,\n        style: {\n          marginBottom: '16px'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 27\n      }, this), success && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"primary\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Send Emails\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), validEmails.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      mt: 3,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Valid Emails:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: validEmails.map((email, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: email\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this), invalidEmails.length > 0 && /*#__PURE__*/_jsxDEV(Box, {\n      mt: 3,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"Invalid Emails:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: invalidEmails.map((email, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: email\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(EmailSender, \"k/xcVCfp5Brbo6pKxnIxRSypnIE=\");\n_c = EmailSender;\nexport default EmailSender;\nvar _c;\n$RefreshReg$(_c, \"EmailSender\");","map":{"version":3,"names":["React","useState","TextField","Button","Container","Typography","Box","sendEmail","jsxDEV","_jsxDEV","EmailSender","_s","emails","setEmails","subject","setSubject","body","setBody","file","setFile","error","setError","success","setSuccess","validEmails","setValidEmails","invalidEmails","setInvalidEmails","handleFileUpload","event","target","files","handleSubmit","e","preventDefault","formData","FormData","append","result","message","valid_emails","invalid_emails","err","maxWidth","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","fullWidth","label","margin","value","onChange","required","multiline","rows","placeholder","disabled","type","accept","style","marginBottom","color","length","mt","map","email","index","_c","$RefreshReg$"],"sources":["/Users/zop7768/go/src/MyProjects/massmailgeneratorusinggolang/frontend/src/components/EmailSender.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Container, Typography, Box } from '@mui/material';\nimport { sendEmail } from '../services/emailService';\n\nconst EmailSender = () => {\n    const [emails, setEmails] = useState('');\n    const [subject, setSubject] = useState('');\n    const [body, setBody] = useState('');\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n    const [validEmails, setValidEmails] = useState([]);  // Initialize as an empty array\n    const [invalidEmails, setInvalidEmails] = useState([]);  // Initialize as an empty array\n\n    const handleFileUpload = (event) => {\n        setFile(event.target.files[0]);\n    };\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const formData = new FormData();\n        formData.append('subject', subject);\n        formData.append('body', body);\n        if (file) {\n            formData.append('file', file);\n        } else {\n            formData.append('emails', emails);\n        }\n\n        try {\n            const result = await sendEmail(formData);\n            setSuccess(result.message);\n            setValidEmails(result.valid_emails || []);  // Ensure it's always an array\n            setInvalidEmails(result.invalid_emails || []);  // Ensure it's always an array\n            setError('');\n        } catch (err) {\n            setError(err.error || 'Failed to send emails');\n            setSuccess('');\n        }\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Typography variant=\"h4\" gutterBottom>\n                Mass Email Sender\n            </Typography>\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    fullWidth\n                    label=\"Subject\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    value={subject}\n                    onChange={(e) => setSubject(e.target.value)}\n                    required\n                />\n                <TextField\n                    fullWidth\n                    label=\"Body\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    multiline\n                    rows={4}\n                    value={body}\n                    onChange={(e) => setBody(e.target.value)}\n                    required\n                />\n                <TextField\n                    fullWidth\n                    label=\"Recipient Emails\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    multiline // Allow multiple lines\n                    rows={4} // Set visible rows\n                    placeholder=\"Enter emails separated by commas or newlines\"\n                    value={emails}\n                    onChange={(e) => setEmails(e.target.value)}\n                    disabled={!!file} // Disable if file is uploaded\n                />\n                <Typography variant=\"body2\" gutterBottom>\n                    OR upload a CSV file with email addresses:\n                </Typography>\n                <input\n                    type=\"file\"\n                    accept=\".csv\"\n                    onChange={handleFileUpload}\n                    style={{ marginBottom: '16px' }}\n                />\n                {error && <Typography color=\"error\">{error}</Typography>}\n                {success && <Typography color=\"primary\">{success}</Typography>}\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" fullWidth>\n                    Send Emails\n                </Button>\n            </form>\n\n            {/* Display Valid and Invalid Emails */}\n            {validEmails.length > 0 && (\n                <Box mt={3}>\n                    <Typography variant=\"h6\" gutterBottom>Valid Emails:</Typography>\n                    <ul>\n                        {validEmails.map((email, index) => (\n                            <li key={index}>{email}</li>\n                        ))}\n                    </ul>\n                </Box>\n            )}\n\n            {invalidEmails.length > 0 && (\n                <Box mt={3}>\n                    <Typography variant=\"h6\" gutterBottom>Invalid Emails:</Typography>\n                    <ul>\n                        {invalidEmails.map((email, index) => (\n                            <li key={index}>{email}</li>\n                        ))}\n                    </ul>\n                </Box>\n            )}\n        </Container>\n    );\n};\n\nexport default EmailSender;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}