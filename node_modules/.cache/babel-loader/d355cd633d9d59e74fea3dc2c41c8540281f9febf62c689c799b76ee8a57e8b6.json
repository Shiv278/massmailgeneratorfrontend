{"ast":null,"code":"var _jsxFileName = \"/Users/zop7768/go/src/MyProjects/massmailgeneratorusinggolang/frontend/src/components/EmailSender.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { TextField, Button, Container, Typography } from '@mui/material';\nimport { sendEmail } from '../services/emailService';\nimport { parseCSV } from '../utils/csvParser'; // Utility to parse CSV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EmailSender = () => {\n  _s();\n  const [subject, setSubject] = useState('');\n  const [body, setBody] = useState('');\n  const [emailInput, setEmailInput] = useState('');\n  const [file, setFile] = useState(null);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n    let emailList = [];\n    if (file) {\n      // If CSV file is uploaded, parse the emails\n      emailList = await parseCSV(file);\n    } else {\n      // Split the manual input into an array of emails\n      emailList = emailInput.split(/[\\s,;]+/).filter(email => email.trim());\n    }\n    const emailData = {\n      subject,\n      body,\n      emails: emailList\n    };\n    try {\n      const result = await sendEmail(emailData); // Make sure to handle email list on the backend\n      setSuccess('Emails sent successfully!');\n      setError('');\n    } catch (err) {\n      setError(err.error || 'Failed to send email');\n      setSuccess('');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"sm\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Mass Email Sender\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Subject\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        value: subject,\n        onChange: e => setSubject(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Body\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        multiline: true,\n        rows: 4,\n        value: body,\n        onChange: e => setBody(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Recipient Email(s)\",\n        variant: \"outlined\",\n        margin: \"normal\",\n        multiline: true,\n        rows: 4,\n        value: emailInput,\n        onChange: e => setEmailInput(e.target.value),\n        placeholder: \"Enter emails separated by commas or newlines\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          component: \"label\",\n          children: [\"Upload CSV\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            hidden: true,\n            accept: \".csv\",\n            onChange: e => setFile(e.target.files[0])\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 27\n      }, this), success && /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"primary\",\n        children: success\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 29\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"Send Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(EmailSender, \"JAb71Z1Xg8lXONnzAuymAdwDfyM=\");\n_c = EmailSender;\nexport default EmailSender;\nvar _c;\n$RefreshReg$(_c, \"EmailSender\");","map":{"version":3,"names":["React","useState","TextField","Button","Container","Typography","sendEmail","parseCSV","jsxDEV","_jsxDEV","EmailSender","_s","subject","setSubject","body","setBody","emailInput","setEmailInput","file","setFile","error","setError","success","setSuccess","handleSubmit","e","preventDefault","emailList","split","filter","email","trim","emailData","emails","result","err","maxWidth","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","fullWidth","label","margin","value","onChange","target","required","multiline","rows","placeholder","component","type","hidden","accept","files","color","_c","$RefreshReg$"],"sources":["/Users/zop7768/go/src/MyProjects/massmailgeneratorusinggolang/frontend/src/components/EmailSender.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { TextField, Button, Container, Typography } from '@mui/material';\nimport { sendEmail } from '../services/emailService';\nimport { parseCSV } from '../utils/csvParser'; // Utility to parse CSV\n\nconst EmailSender = () => {\n    const [subject, setSubject] = useState('');\n    const [body, setBody] = useState('');\n    const [emailInput, setEmailInput] = useState('');\n    const [file, setFile] = useState(null);\n    const [error, setError] = useState('');\n    const [success, setSuccess] = useState('');\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n\n        let emailList = [];\n        if (file) {\n            // If CSV file is uploaded, parse the emails\n            emailList = await parseCSV(file);\n        } else {\n            // Split the manual input into an array of emails\n            emailList = emailInput.split(/[\\s,;]+/).filter(email => email.trim());\n        }\n\n        const emailData = { subject, body, emails: emailList };\n\n        try {\n            const result = await sendEmail(emailData); // Make sure to handle email list on the backend\n            setSuccess('Emails sent successfully!');\n            setError('');\n        } catch (err) {\n            setError(err.error || 'Failed to send email');\n            setSuccess('');\n        }\n    };\n\n    return (\n        <Container maxWidth=\"sm\">\n            <Typography variant=\"h4\" gutterBottom>\n                Mass Email Sender\n            </Typography>\n            <form onSubmit={handleSubmit}>\n                <TextField\n                    fullWidth\n                    label=\"Subject\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    value={subject}\n                    onChange={(e) => setSubject(e.target.value)}\n                    required\n                />\n                <TextField\n                    fullWidth\n                    label=\"Body\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    multiline\n                    rows={4}\n                    value={body}\n                    onChange={(e) => setBody(e.target.value)}\n                    required\n                />\n\n                <TextField\n                    fullWidth\n                    label=\"Recipient Email(s)\"\n                    variant=\"outlined\"\n                    margin=\"normal\"\n                    multiline\n                    rows={4}\n                    value={emailInput}\n                    onChange={(e) => setEmailInput(e.target.value)}\n                    placeholder=\"Enter emails separated by commas or newlines\"\n                />\n                <div>\n                    <Button variant=\"contained\" component=\"label\">\n                        Upload CSV\n                        <input\n                            type=\"file\"\n                            hidden\n                            accept=\".csv\"\n                            onChange={(e) => setFile(e.target.files[0])}\n                        />\n                    </Button>\n                </div>\n\n                {error && <Typography color=\"error\">{error}</Typography>}\n                {success && <Typography color=\"primary\">{success}</Typography>}\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\" fullWidth>\n                    Send Email\n                </Button>\n            </form>\n        </Container>\n    );\n};\n\nexport default EmailSender;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}